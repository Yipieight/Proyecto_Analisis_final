name: Build and Deploy to Azure Container Apps

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: mastercookregistry
  RESOURCE_GROUP: MasterCookGroup
  CONTAINER_APP_ENVIRONMENT: mastercook-environment
  REGION: eastus

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: workflows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push login_service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./login_backend_api_python/Dockerfile
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/login_service:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/login_service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push workshop_service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./workshop_backend_api_python/Dockerfile
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/workshop_service:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/workshop_service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push reservation_service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./reservation_backend_api_python/Dockerfile
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/reservation_service:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/reservation_service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push payment_service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./payment_backend_api_python/Dockerfile
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/payment_service:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/payment_service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push booking_service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./booking_backend_api_python/Dockerfile
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/booking_service:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/booking_service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment: workflows
    
    steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Azure Container Apps Extension
      run: |
        # Remove existing extension if present (without --yes flag)
        az extension remove --name containerapp 2>/dev/null || true
        # Add the containerapp extension
        az extension add --name containerapp

    - name: Deploy Login Service
      run: |
        echo "ðŸš€ Deploying login-service..."
        az containerapp update \
          --name login-service \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/login_service:${{ github.sha }} \
          --set-env-vars \
            DB_USER='avnadmin' \
            DB_PASSWORD='AVNS_Ndhucmx5Rv2r1Ni7ocS' \
            DB_HOST='mysql-3bbd1558-xboxgar56-040e.g.aivencloud.com' \
            DB_PORT='16152' \
            DB_NAME='defaultdb' \
            JWT_SECRET_KEY='mastercook-super-secret' \
            GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"

    - name: Deploy Workshop Service
      run: |
        echo "ðŸš€ Deploying workshop-service..."
        az containerapp update \
          --name workshop-service \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/workshop_service:${{ github.sha }} \
          --set-env-vars \
            DB_USER='avnadmin' \
            DB_PASSWORD='AVNS_Ndhucmx5Rv2r1Ni7ocS' \
            DB_HOST='mysql-3bbd1558-xboxgar56-040e.g.aivencloud.com' \
            DB_PORT='16152' \
            DB_NAME='defaultdb' \
            JWT_SECRET_KEY='mastercook-super-secret'

    - name: Deploy Reservation Service
      run: |
        echo "ðŸš€ Deploying reservation-service..."
        az containerapp update \
          --name reservation-service \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/reservation_service:${{ github.sha }} \
          --set-env-vars \
            DB_USER='avnadmin' \
            DB_PASSWORD='AVNS_Ndhucmx5Rv2r1Ni7ocS' \
            DB_HOST='mysql-3bbd1558-xboxgar56-040e.g.aivencloud.com' \
            DB_PORT='16152' \
            DB_NAME='defaultdb' \
            JWT_SECRET_KEY='mastercook-super-secret'

    - name: Deploy Payment Service
      run: |
        echo "ðŸš€ Deploying payment-service..."
        az containerapp update \
          --name payment-service \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/payment_service:${{ github.sha }} \
          --set-env-vars \
            DB_USER='avnadmin' \
            DB_PASSWORD='AVNS_Ndhucmx5Rv2r1Ni7ocS' \
            DB_HOST='mysql-3bbd1558-xboxgar56-040e.g.aivencloud.com' \
            DB_PORT='16152' \
            DB_NAME='defaultdb' \
            JWT_SECRET_KEY='mastercook-super-secret' \
            RESERVATION_SERVICE_URL='https://reservation-service.mangoflower-5e37f0a4.eastus.azurecontainerapps.io' \
            STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}"

    - name: Deploy Booking Service (API Gateway)
      run: |
        echo "ðŸš€ Deploying booking-service (API Gateway)..."
        az containerapp update \
          --name booking-service \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/booking_service:${{ github.sha }} \
          --set-env-vars \
            DB_USER='avnadmin' \
            DB_PASSWORD='AVNS_Ndhucmx5Rv2r1Ni7ocS' \
            DB_HOST='mysql-3bbd1558-xboxgar56-040e.g.aivencloud.com' \
            DB_PORT='16152' \
            DB_NAME='defaultdb' \
            JWT_SECRET_KEY='mastercook-super-secret' \
            LOGIN_SERVICE_URL='https://login-service.mangoflower-5e37f0a4.eastus.azurecontainerapps.io' \
            WORKSHOP_SERVICE_URL='https://workshop-service.mangoflower-5e37f0a4.eastus.azurecontainerapps.io' \
            RESERVATION_SERVICE_URL='https://reservation-service.mangoflower-5e37f0a4.eastus.azurecontainerapps.io' \
            PAYMENT_SERVICE_URL='https://payment-service.mangoflower-5e37f0a4.eastus.azurecontainerapps.io'

    - name: Verify Deployment
      run: |
        echo "=== Public URLs ==="
        az containerapp list \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "[].{Name:name, URL:properties.configuration.ingress.fqdn}" \
          -o table
          
        echo ""
        echo "=== Testing API Gateway Health ==="
        sleep 30  # Wait for deployment to be ready
        curl -f https://booking-service.mangoflower-5e37f0a4.eastus.azurecontainerapps.io/api/health || echo "Health check failed"
        curl -f https://booking-service.mangoflower-5e37f0a4.eastus.azurecontainerapps.io/api/health/services || echo "Services health check failed"
